AWSTemplateFormatVersion: '2010-09-09'

Resources:
  rInputBucket:
    Type: AWS::S3::Bucket
    DependsOn: rInputBucketPermission
    Properties:
      BucketName:
        Fn::Join:
        - ''
        - - input-
          - Fn::Select:
            - 1
            - Fn::Split:
              - "/"
              - Ref: AWS::StackId
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: s3:ObjectCreated:*
          Function:
            Fn::GetAtt:
            - rTriggerAiLambda
            - Arn
  rInputBucketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: rTriggerAiLambda
      Principal: s3.amazonaws.com
      SourceAccount:
        Ref: AWS::AccountId
  rOutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join:
        - ''
        - - output-
          - Fn::Select:
            - 1
            - Fn::Split:
              - "/"
              - Ref: AWS::StackId
  rLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Join:
        - ''
        - - lab-2-role-lambda-
          - Ref: AWS::Region
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: lab-policy-lambda
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - s3:*
            Resource: "*"
          - Effect: Allow
            Action:
            - states:StartExecution
            Resource:
              Ref: rStateMachine
          - Effect: Allow
            Action:
            - transcribe:StartTranscriptionJob
            - transcribe:GetTranscriptionJob
            Resource: "*"
          - Effect: Allow
            Action:
            - comprehend:DetectSentiment
            Resource: "*"
          - Effect: Allow
            Action:
            - translate:TranslateText
            Resource: "*"
          - Effect: Allow
            Action:
            - polly:StartSpeechSynthesisTask
            Resource: "*"
  rStateMachineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Join:
        - ''
        - - lab-2-role-step-function-
          - Ref: AWS::Region
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - states.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: lab-policy-step-functions
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource: "*"
  rTriggerAiLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: lab-trigger-ai-pipeline
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
        - rLambdaExecutionRole
        - Arn
      Code:
        ZipFile:
          Fn::Sub: |
            import boto3
            import os
            import json
            
            stepfunctions = boto3.client('stepfunctions')
            
            def lambda_handler(event, context):
                
              bucket = event['Records'][0]['s3']['bucket']['name']
              key = event['Records'][0]['s3']['object']['key']
              
              input = {
                "Bucket" : bucket,
                "Key": key
              }
              
              response = stepfunctions.start_execution(
                  stateMachineArn=os.environ['STATE_MACHINE_ARN'],
                  input=json.dumps(input)
              )
              
              return json.dumps(response, default=str)
      Runtime: python3.6
      Environment:
        Variables:
          STATE_MACHINE_ARN:
            Ref: rStateMachine
      Timeout: 300
  rTranscribeWrapperLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: lab-transcribe-wrapper
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
        - rLambdaExecutionRole
        - Arn
      Code:
        ZipFile:
          Fn::Sub: |
            import boto3
            import os
            import uuid
            
            transcribe = boto3.client('transcribe')
            
            def lambda_handler(event, context):
      
                input = event['Input']
                s3Path = "s3://" + input['Bucket'] + "/" + input['Key']
                jobName = input['Key'] + '-' + str(uuid.uuid4())
                
                response = transcribe.start_transcription_job(
                    TranscriptionJobName=jobName,
                    LanguageCode=os.environ['LANGUAGECODE'],
                    MediaFormat='mp4',
                    Media={
                        'MediaFileUri': s3Path
                    },
                    Settings={
                        'ShowSpeakerLabels': False,
                        'ChannelIdentification': False
                    }
                )
                
                return {
                    'TranscriptionJobName': response['TranscriptionJob']['TranscriptionJobName']
                }
      Runtime: python3.6
      Environment:
        Variables:
          LANGUAGECODE: en-US
      Timeout: 300
  rTranscribeCheckerWrapperLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: lab-transcribe-status-checker
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
        - rLambdaExecutionRole
        - Arn
      Code:
        ZipFile:
          Fn::Sub: |
            import boto3
            
            transcribe = boto3.client('transcribe')

            def lambda_handler(event, context):
                
              payload = event['Input']['Payload']
          
              transcriptionJobName = payload['TranscriptionJobName']
              
              response = transcribe.get_transcription_job(
                  TranscriptionJobName=transcriptionJobName
              )
              
              transcriptionJob = response['TranscriptionJob']
              
              transcriptFileUri = "none"
              if 'Transcript' in transcriptionJob:
                if 'TranscriptFileUri' in transcriptionJob['Transcript']:
                  transcriptFileUri = transcriptionJob['Transcript']['TranscriptFileUri']
                  
              return {
                        'TranscriptFileUri': transcriptFileUri,
                        'TranscriptionJobName': transcriptionJobName,
                        'TranscriptionJobStatus': response['TranscriptionJob']['TranscriptionJobStatus']
                      }
      Runtime: python3.6
      Timeout: 300
  rComprehendWrapperLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: lab-comprehend-wrapper
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
        - rLambdaExecutionRole
        - Arn
      Code:
        ZipFile:
          Fn::Sub: |
            import boto3
            import json
            import urllib.request
            
            comprehend = boto3.client('comprehend')
            
            def lambda_handler(event, context):
              payload = event['Input']['Payload']
              transcriptFileUri = payload['TranscriptFileUri']
            
              transcriptionJobName = payload['TranscriptionJobName']
            
              transcriptFile = urllib.request.urlopen(transcriptFileUri)
              transcript = transcriptFile.read()
            
              transcript = json.loads(transcript)
              transcript_text = transcript['results']['transcripts'][0]['transcript']
                           
              response = comprehend.detect_sentiment(
                  Text=transcript_text,
                  LanguageCode='en'
              )
            
              sentiment = response['Sentiment']
            
              return {
                      'Sentiment': sentiment,
                      'TranscriptionJobName': transcriptionJobName
                      }
      Runtime: python3.6
      Timeout: 300
  rTranslateWrapperLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: lab-translate-wrapper
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
        - rLambdaExecutionRole
        - Arn
      Code:
        ZipFile:
          Fn::Sub: |
            import boto3
            import json
            import os
            import urllib.request
            
            translate = boto3.client('translate')
            
            def lambda_handler(event, context):
              payload = event['Input']['Payload']
              transcriptFileUri = payload['TranscriptFileUri']
          
              transcriptionJobName = payload['TranscriptionJobName']
          
              transcriptFile = urllib.request.urlopen(transcriptFileUri)
              transcript = transcriptFile.read()
          
              transcript = json.loads(transcript)
              transcript_text = transcript['results']['transcripts'][0]['transcript']
          
          
              response = translate.translate_text(
                  Text=transcript_text,
                  SourceLanguageCode=os.environ['SOURCELANGUAGECODE'],
                  TargetLanguageCode=os.environ['TARGETLANGUAGECODE']
              )
          
              return {
                  'TranslatedText': response['TranslatedText'],
                  'TranscriptionJobName': transcriptionJobName,
              }
      Runtime: python3.6
      Environment:
        Variables:
          SOURCELANGUAGECODE: en
          TARGETLANGUAGECODE: es
      Timeout: 300
  rPollyWrapperLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: lab-polly-wrapper
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
        - rLambdaExecutionRole
        - Arn
      Code:
        ZipFile:
          Fn::Sub: |
            # https://docs.aws.amazon.com/polly/latest/dg/voicelist.html
            import
            boto3
            import os
            
            polly = boto3.client('polly')
            
            def lambda_handler(event, context):
              
              payload = event['Input'][0]['Payload']
              payload_other = event['Input'][1]['Payload']
              
              payload.update(payload_other)
          
              translatedText = payload['TranslatedText']
              transcriptionJobName = payload['TranscriptionJobName']
              sentiment = payload['Sentiment']
          
              response = polly.start_speech_synthesis_task(
                  LanguageCode=os.environ['LANGUAGECODE'],
                  OutputFormat='mp3',
                  OutputS3BucketName=os.environ['OUTPUTS3BUCKETNAME'],
                  OutputS3KeyPrefix=sentiment + "/" + transcriptionJobName + "-" + sentiment,
                  Text=translatedText,
                  TextType='text',
                  VoiceId=os.environ['VOICEID']
              )
          
              return {
                  'TaskId': response['SynthesisTask']['TaskId'],
                  'TranscriptionJobName': transcriptionJobName
              }
      Runtime: python3.6
      Environment:
        Variables:
          LANGUAGECODE: es-ES
          OUTPUTS3BUCKETNAME:
            Ref: rOutputBucket
          VOICEID: Lucia
      Timeout: 300
  rStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: parallel-task-state-machine
      DefinitionString:
        Fn::Sub: |
          {
            "StartAt":"transcribe",
            "States":{
              "transcribe":{
                "Type":"Task",
                "Resource":"arn:aws:states:::lambda:invoke",
                "Parameters":{
                    "FunctionName":"arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:lab-transcribe-wrapper:$LATEST",
                    "Payload":{
                      "Input.$":"$"
                    }
                },
                "Next":"transcribe-wait"
              },
              "transcribe-wait":{
                "Type":"Wait",
                "Seconds":2,
                "Next":"transcribe-status"
              },
              "transcribe-status": {
                "Type":"Task",
                "Resource":"arn:aws:states:::lambda:invoke",
                "Parameters":{
                  "FunctionName":"arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:lab-transcribe-status-checker:$LATEST",
                    "Payload":{
                      "Input.$":"$"
                    }
                },
                "Next": "transcribe-complete"
              },
              "transcribe-complete":{
                "Type":"Choice",
                "Choices":[
                    {
                      "Variable":"$.Payload.TranscriptionJobStatus",
                      "StringEquals":"COMPLETED",
                      "Next":"success"
                    },
                    {
                      "Variable":"$.Payload.TranscriptionJobStatus",
                      "StringEquals":"FAILED",
                      "Next":"error"
                    }
                ],
                "Default":"transcribe-wait"  
              },
              "process-transcript":{
                "Type":"Parallel",
                "Branches":[
                  {
                      "StartAt":"comprehend",
                      "States":{
                          "comprehend": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke",
                            "Parameters": {
                              "FunctionName": "arn:aws:lambda:${AWS::Region}:${AWS:AccountId}:function:lab-comprehend-wrapper:$LATEST",
                              "Payload": {
                                "Input.$": "$"
                              }
                            },
                            "End": True
                          }
                      }
                  },
                  {
                      "StartAt":"translate",
                      "States":{
                        "translate": {
                          "Type": "Task",
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "Parameters": {
                            "FunctionName": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:lab-translate-wrapper:$LATEST",
                            "Payload": {
                              "Input.$": "$"
                            }
                          },
                          "End": true
                        }
                      }
                  }
                ],
                "Next":"polly"
              },
              "polly":{
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "Parameters": {
                  "FunctionName": "arn:aws:lambda:us-east-1:515182405569:function:lab-polly-wrapper:$LATEST",
                  "Payload": {
                    "Input.$": "$"
                  }
                },
                "End": true  
              },
              "error": {
                "Type": "Pass",
                "End": true
              }
            }
          }
      RoleArn:
        Fn::GetAtt:
        - rStateMachineExecutionRole
        - Arn
